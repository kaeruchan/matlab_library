% Clean all residual data
clear all;
close all;
clc;

% parameter library
N_max = 1000;
M=10; %The number of relay
V=5; %Rician Factor
Omega = 2; 
Pj = 15; %Power of Jammer (dBm)
P0 = 15:1:40; %Power of Signal (dBm)
gamma_k = 20; %threshold SNR (dBm)
N0 = -150; %Power of noise (dBm)
%beta = 0.5; %time ratio
q = 0.1; % Bernoulli Variance
R = 1; % secrecy rate

% initial parameter
pr_secrecy_simulation2 = zeros(1,length(P0));
pr_secrecy_simulation = zeros(1,length(P0));

for Pindex = 1:length(P0)
    
     % Parameters (dbm --> watt)    
    p_Pj = 10^(Pj/10)*10^(-3);
    p_P0 = 10^(P0(Pindex)/10)*10^(-3);
    p_N0 = 10^(N0/10)*10^(-3);
    
    
    
    % Simulation 1
    
    % initial counter
    
    counter = 0;
    
    
    
    for N = 1:N_max
    % gamma_D
        
        
    
    
     % random variables library   
        % jammer
        j_i = 0;
        j_sum_1 = 0;
        j_sum_2 = 0;
        h_2 = 0;
        h_2_max = 0;
        j_2 = 0;
        
        for i = 0:1:M-1
            j_i = j_i + (random('rician',sqrt(V/(1+V)*Omega),sqrt(Omega/(2*(V+1)))))^2;
            j_sum_1 = j_sum_1 + (random('rician',sqrt(V/(1+V)*Omega),sqrt(Omega/(2*(V+1)))))^2;
            j_sum_2 = j_sum_2 + (random('rician',sqrt(V/(1+V)*Omega),sqrt(Omega/(2*(V+1)))))^2;
        end
        
         g_2 = (random('rician',sqrt(V/(1+V)*Omega),sqrt(Omega/(2*(V+1)))))^2;
         
        for Mindex = 0:1:M
            h_2 = (random('rician',sqrt(V/(1+V)*Omega),sqrt(Omega/(2*(V+1)))))^2;
            if h_2_max < h_2
                h_2_max = h_2;
            end
        end
        
        for Mindex = 1:M-1
            j_2 = j_2 + (random('rician',sqrt(V/(1+V)*Omega),sqrt(Omega/(2*(V+1)))))^2;
        end
        
    % Rician fading
        f_1 = (random('rician',sqrt(V/(1+V)*Omega),sqrt(Omega/(2*(V+1)))))^2;
        f_2 = (random('rician',sqrt(V/(1+V)*Omega),sqrt(Omega/(2*(V+1)))))^2;

    % bernoulli distribution
        i_1 = random('binomial',1,q);
        i_2 = random('binomial',1,q);
        
        
        
        % Gamma_D
        gamma_D = min([(h_2_max*p_P0/(2*p_N0+p_Pj*j_sum_1)), (g_2*p_P0/(2*p_N0+p_Pj*j_sum_2))]);
        gamma_E = (p_P0*i_1*f_1/(2*p_N0+j_2*p_Pj)+p_P0*i_2*f_2/(2*p_N0+j_2*p_Pj));
    
        
        % judge 
        
        C_d = 1/2 .* log2(1+gamma_D);
        
        C_e = 1/2 .* log2(1+gamma_E);
        
        C_s = max(C_d-C_e,0)
        if (C_s < R)
            counter=counter+1;
        end
        
    end
    
    pr_secrecy_simulation(Pindex) = counter/N_max
    
    % simulation 2
    
        counter = 0;
    
    
    
    for N = 1:N_max
    % gamma_D
        
        
    
    
     % random variables library   
        % jammer
        j_i = 0;
        j_sum_1 = 0;
        j_sum_2 = 0;
        h_2 = 0;
        h_2_max = 0;
        j_2 = 0;
        
        for i = 0:1:M-1
            j_i = j_i + (random('rician',sqrt(V/(1+V)*Omega),sqrt(Omega/(2*(V+1)))))^2;
            j_sum_1 = j_sum_1 + (random('rician',sqrt(V/(1+V)*Omega),sqrt(Omega/(2*(V+1)))))^2;
            j_sum_2 = j_sum_2 + (random('rician',sqrt(V/(1+V)*Omega),sqrt(Omega/(2*(V+1)))))^2;
        end
        
         g_2 = (random('rician',sqrt(V/(1+V)*Omega),sqrt(Omega/(2*(V+1)))))^2;
         
        for Mindex = 0:1:M
            h_2 = (random('rician',sqrt(V/(1+V)*Omega),sqrt(Omega/(2*(V+1)))))^2;
            if h_2_max < h_2
                h_2_max = h_2;
            end
        end
        
        for Mindex = 1:M-1
            j_2 = j_2 + (random('rician',sqrt(V/(1+V)*Omega),sqrt(Omega/(2*(V+1)))))^2;
        end
        
    % Rician fading
        f_1 = (random('rician',sqrt(V/(1+V)*Omega),sqrt(Omega/(2*(V+1)))))^2;
        f_2 = (random('rician',sqrt(V/(1+V)*Omega),sqrt(Omega/(2*(V+1)))))^2;

    % bernoulli distribution
        i_1 = random('binomial',1,q);
        i_2 = random('binomial',1,q);
        
        
        
        % Gamma_D
        gamma_D = min([(h_2_max*p_P0/(2*p_N0+p_Pj*j_sum_1)), (g_2*p_P0/(2*p_N0+p_Pj*j_sum_2))]);
        gamma_E = (p_P0*i_1*f_1/(2*p_N0+j_2*p_Pj)+p_P0*i_2*f_2/(2*p_N0+j_2*p_Pj));
    
        
        % judge 
        
        C_d = 1/2 .* log2(1+gamma_D);
        
        C_e = 1/2 .* log2(1+gamma_E);
        
        C_s = max(1/2 .* log2((1+gamma_D)/(1+gamma_E)),0)
        if (C_s < R)
            counter=counter+1;
        end
        
    end
    
    pr_secrecy_simulation2(Pindex) = counter/N_max
    
end

% plot
p1=semilogy(P0,pr_secrecy_simulation,'-');
ax = gca;
ax.FontSize=16;
ax.YLim = [0.01,1];
grid on
p1.Color = 'Red';
p1.LineWidth = 2;
xlabel('Transmission Power (P_0)','FontSize',16);
ylabel('Secrecy Outage Probability','FontSize',16);

hold on %other lines

p2 = semilogy(P0,pr_secrecy_simulation2,'--v');
p2.Color = 'Red';
p2.MarkerSize = 10;
p2.LineWidth = 2;

lgd=legend([p1,p2],'Anal.','Simu.');
lgd.FontSize = 16;
lgd.Location = 'southwest';

fname = '/users/shin/dropbox/programming/matlab';
saveas(p1,fullfile(fname,'sec_fig'),'fig');
